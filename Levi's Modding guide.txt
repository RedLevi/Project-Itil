####Levi's HOI4 event tutorial!####

#####Table of contents: 
#GENERAL INFO =  8 - 21   
#EVENTS =  23 -  
#LOCALIZATION =  150 - 170  
														##Introduction##
Hello newcomers! This file will include instructions and tricks I learned while modding HOI4 and will hopefully help you learn how to code !
														#Set up#
Before actually starting to mod you have to make sure you are correctly syncd up with our GitHub project. If you have not set up your GitHub project please
ask one of the developers for the instructions on the discord chat.
After setting up your github you need to download notepad++ for coding. notepad++ has many features that makes modding for HOI4 faster and safer. 
download link: https://notepad-plus-plus.org/
Now you are ready to get assignments from the modding staff! Please be active on our discord chat and keep us posted on your progress ;)
														#The Comment#
First thing is the general structure of your file. It is suggested that you'll arrange your file in a clean way so that it will be easy to
look through when editing (short lines, spaces between different parts, etc). A useful tool for arranging your file is the #comment. In HOI4 files, everything 
that appears in a line after a # is called a comment, and it is ignored by the game engine when reading the file. You can use it to point out specific details 
about that particular part of the file (For example a name of a specific event, or a new section in the file). You can also make a comment inside of an 
existing line of code without affecting the reading of the engine by having a # at both ends of the comment, for example : 
	this is read by the engine#but this is not#and is read again
	
														  ##Events##
														  #Namespace#
Before writing any event in your event file you must add a 'namespace'. This is the prefix for your event IDs, and is necessary to make your event file work.
in order to set up a namespace you need to add the following code at the top of your file: add_namespace = your namespace here
your namespace should be a short word made of lowercase letters that has something to do with the topic of your file. For the sake of this tutorial we will
use the namespace 'levi', so at the top of our file we will write add_namespace = levi
														  #Country Events#
There are two kinds of events in HOI4, country events and news events. Both types have generally the same structure and work very similarly, so from now
on all examples will be made with country events, as they are the most common type of event that you will make. We will come back to news events later.
Every event must have three "stages" that must be present for it to function properly:
	1.) frame 
	2.) trigger
	3.) option(s)	
				
				The Frame is made of a closed bracket and 3 charectaristics that are required for your event. The closed bracket should look like this: 
				
				country_event = {...}
			everything in your event needs to go between these brackets. Every bracket in your file must also have a closing later on in its event.
			Inside of your country_event brackets you must have an event ID. This is the 'serial number' of this particular event and should be made of 
			the file's namespace and a number, written like this: 
							id = levi.1 
			it is recommended you serialize your events in a rising order of numbers, meaning levi.1, levi.2, levi.3 etc. 
			
			the second part of your frame is the event title. The event title is the code 'string' that the game translates into text while using the localization
			file ( see "localization" ). The code for the event title should look like this: 
							title = levi.1.t 
			Please note multiple events can use the same title string, so it is possible to have something like this: 
			
							id = levi.2 
							title = levi.1.t
			This means you can have two seprate events that appear with the same title in game! 
			The third and last part of the frame is the description. The description works identicaly to the title only here it is the string for the ecent description 
			text. It should look like this: 
							desc = levi.1.d 
			So the frame of your event should look like this: 
							country_event = {
							id = levi.1
							title = levi.1.t 
							desc = levi.1.d 
							}
										
					#Levi tip: It is a good idea to write the name of your event in a comment in the first line of the frame, so that you would know which 
					event is what when reviwing~!#
					
		The trigger is is the part of your event which determines when or under what conditions will your event fire ingame. It usually comes directly after desc.
		There are two kinds of event triggers that can be used in HOI4: A conditions trigger or a triggered only trigger. a triggered only trigger is the more simple of the two 
		and basically means that this particular event can only be fired via a command from another event or national focus. It is useful for event chains. it is written like this: 
		is_triggered_only = yes 
		The conditions trigger can range from being very simple to extremely complicated, all depending on the event you're making. The idea behind a conditions trigger 
		is that the event will fire the first day when all conditions in it are met. A sort of timer can be added in the form of a MTTH (mean time to happen) to give a 'delay' 
		for this kind of trigger, which we will show later. 
		A nice feature you can use if you want to make sure your event only fires one time is the fire_only_once command, which is written before the trigger is: 
		fire_only_once = yes 
		an example of how a fire_only_once event trigger would look like: 
		fire_only_once = yes 
		trigger = {  
		tag = GER 
		has_country_flag = tutorial_flag 
		date > 1936.1.1 
							}
		a full list of conditions can be found here: http://www.hoi4wiki.com/Conditions
		
		#Levi tip: You can also use a condition trigger in an option ( see options ), which means the option you use it on will only be available if you meet the 
		conditions specified in the trigger~!#
		
		A MTTH value works by giving each day in the MTTH a rising chance of the event to fire, with the value in the MTTH having a 50% chance of firing, meaning 
		that if we set the MTTH to be 5 days, the event will have a 10% chance of firing on the first day of the conditions being met, a 50% chance at day 5 
		and a 100% at day 10. It is written after the trigger like this: 
		mean_time_to_happen = { days = 5 }
		Please note a MTTH can only be used in an event that has a conditions trigger without is_triggered_only command!
		
		
		The options are the part of the event that determines what kind of effect your event will have on the game. An event can have one, or multiple events. 
		It is best to keep the number of events under 5 as the event box ingame has a size limit. The option should be after the trigger, or after the MTTH if 
		you added one.
		The option should be contained inside an option bracket written like this: 
		option = { ... }
		the first thing that should be inside an option bracket is a name. This functions like title and description do, and is written like this:
		name = levi.1.a
		following options should have names like levi.1.b, levi.1.c etc.
		please note that the name for the fourth option must be levi.1.e, since levi.1.d is used by the desc in the frame.
		
		If you include multiple options in an event you might want to add an ai_chance command after the name. The higher the value of an ai_chance is, the more likely
		is the ai to choose that option. This can be used to program more likely scenarios in your event chains. It is recommended you make the total sum of your 
		ai_chance values 100, meaning that if you have 2 options and one has the ai_chance value of 60, the second one should be 40. If you don't add an ai_chance, all
		options will have an equal chance of being chosen.
		example for ai_chance: 
		ai_chance = { factor = 25 }
		
		After setting up an ai_chance you can add effects for your different options. The effects are all the different results an event can have on your gameplay, 
		such as adding a national idea, removing manpower or even setting up flags and firing event chains. For example: 
		set_country_flag = tutorial_flag
		add_manpower = 5777
		A full list of effects can be found here: http://www.hoi4wiki.com/Commands
		a complete option should like like this: 
		
		option = { 
		name = levi.1.a 
		ai_chance = { factor = 55 }
		set_country_flag = tutorial_flag
									}
		
		And those are the basics of event making. In the next example we'll see how a complete event should look like: 
		
		country_event = { #tutorial event 
			id = levi.1 
			title = levi.1.t 
			desc = levi.1.d
			trigger = {
				tag = GER 
				date > 1936.1.1 
			}
			mean_time_to_happen = { days = 10 }
			option = {
				name = levi.1.a 
				ai_chance = { factor = 100 }
				set_country_flag = tutorial_flag
			}
			option = {  
				name = levi.1.b 
				ai_chance = { factor = 0 }
				country_event = { id = levi.2 days = 5 } #this will fire the next event in 5 days of ingame time
			}
		}
And that's a full event! Using these basics alone you can make some very complicated events, which we'll learn how to complicate even more in 
the next chapter, where we'll learn booleans! ;}
			
														#########localization############
localization is the process of turning code strings in the files into text segments ingame. in order to localize a string you need to create a localization file.
Localization files are .YML files inside the localization folder of the mod, and their title should be constructed in this format: 				
			00_file_name_l_language.yml
in our case,the language is English, and our file name is "levi" so the localization file should be called: 
			00_levi_l_english.yml 
the first thing that needs to be written in the localization file is a language definer matching the language in your file name, written like this:
			l_yourlanguage: 
so in our case it should be: 
			l_english: 
after this, you can start localization any string you want to appear in game. the way you do this is very simple. you write the string, after it a colon (:) and the number 0:
our_string:0 
after the zero, you write the text you want inside  qoutation marks ("")
our_string:0 "Our text!"
so in our case, it would be: 
levi.1.t:0 "Levi's event guide"
levi.1.d:0 "Levi have provided us with this nice and easy to follow guide on creating events! How cool is that?"
levi.1.a:0 "Very cool"
levi.1.b:0 "Its alright, I guess..."
		#Levi tip: It is recommended you organize your localization file in categories using comments. for example, all event text would be under####events 
		while all focus localization would be under ####focuses#####

